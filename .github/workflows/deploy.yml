name: Deploy to Server

on:
  push:
    branches:
      - master
      # - development

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up PHP environment
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # or your Laravel PHP version

      # Install dependencies
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      # Set up testing environment
      - name: Create .env.testing file
        run: |
          cp .env.example .env.testing
          echo "DB_CONNECTION=sqlite" >> .env.testing
          echo "DB_DATABASE=:memory:" >> .env.testing
          php artisan key:generate --env=testing

      - name: Run migrations for testing
        run: php artisan migrate --env=testing --force

      # Run tests
      - name: Run Pest Unit tests
        run: ./vendor/bin/pest --parallel --group=unit

      - name: Run Pest Features tests
        run: ./vendor/bin/pest --parallel --group=feature

      - name: Run Stress tests
        run: ./vendor/bin/pest --parallel --group=stress-test

  # Job 2: Static Analysis
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Verify phpstan installation
        run: ls -l ./vendor/bin

      - name: PhpStan analysis
        run: ./vendor/bin/phpstan analyse --memory-limit=512M


  # Job 3: Deploy to Server
  deploy:
    runs-on: ubuntu-latest
    # need 2 jobs to run before deploying
    needs: [build-and-test, static-analysis]
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Git user identity for Heroku
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
            ssh-private-key: ${{ secrets.SPK }}

      - name: Deploy over SSH
        run: |
              ssh -o StrictHostKeyChecking=no ${{ secrets.SU }}@${{ secrets.SH }} << 'EOF'
                cd ${{ secrets.APP_PATH }}
                git pull origin master
                make d-app
                composer install --no-interaction --prefer-dist --optimize-autoloader
                php artisan migrate --force
                php artisan config:cache
                php artisan route:cache
                php artisan view:cache
                chmod -R 775 storage bootstrap/cache
                echo "ðŸš€ Deployment complete"
              EOF